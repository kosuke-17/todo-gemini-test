// This is your Prisma schema file,
// learn more about it in the docs: [https://pris.ly/d/prisma-schema](https://pris.ly/d/prisma-schema)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 優先順位のEnum型定義
enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Todo {
  id        Int       @id @default(autoincrement())
  content   String
  completed Boolean   @default(false)
  dueDate   DateTime?
  priority  Priority  @default(NONE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // ユーザーIDと関連付け
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ユーザーモデル
model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  sessions          Session[]
  todos             Todo[]
  emailChangeTokens EmailChangeToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailChangeToken {
  id        String   @id @default(cuid())
  userId    String
  oldEmail  String
  newEmail  String
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}
